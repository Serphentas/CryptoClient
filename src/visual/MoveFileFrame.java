/* 
 * Copyright (C) 2016 Serphentas
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package visual;

import internal.network.DataClient;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.net.ftp.FTPFile;

/**
 *
 * @author Dreadlockyx
 */
public class MoveFileFrame extends javax.swing.JFrame {

    private static String currDir, currName, newDir, newName;
    private static String[] names;

    /**
     * Creates new form DirectoryView
     *
     * @throws java.io.IOException
     */
    public MoveFileFrame() throws IOException {
        initComponents();
        setLocationRelativeTo(null);
        updateMoveDirTable();
        currDir = DataClient.currentDir();
    }

    static void setParams(String[] names) {
        MoveFileFrame.names = names;
    }

    private void updateMoveDirTable() throws IOException {
        FTPFile[] dirs = DataClient.listDirs();
        DefaultTableModel dtm = (DefaultTableModel) moveDirTable.getModel();
        int i = 0;

        if (!DataClient.isAtRoot()) {
            dtm.setRowCount(dirs.length + 1);
            moveDirTable.setModel(dtm);
            moveDirTable.setValueAt("..", i, 0);
            moveDirTable.setValueAt("", i, 1);
            i++;
        } else {
            dtm.setRowCount(dirs.length);
            moveDirTable.setModel(dtm);
        }

        for (FTPFile f : dirs) {
            moveDirTable.setValueAt(f.getName(), i, 0);
            moveDirTable.setValueAt(f.getTimestamp().getTime(), i, 1);
            i++;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        moveDirTable = new javax.swing.JTable();
        moveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Move file");
        setMinimumSize(new java.awt.Dimension(620, 380));
        setResizable(false);
        setSize(new java.awt.Dimension(620, 380));

        moveDirTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Name", "Date modified"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        moveDirTable.setRowHeight(32);
        moveDirTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                moveDirTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(moveDirTable);
        if (moveDirTable.getColumnModel().getColumnCount() > 0) {
            moveDirTable.getColumnModel().getColumn(1).setMinWidth(200);
            moveDirTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            moveDirTable.getColumnModel().getColumn(1).setMaxWidth(200);
        }

        moveButton.setText("Move here");
        moveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(moveButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(moveButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void moveDirTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveDirTableMouseClicked
        if (evt.getClickCount() == 2) {
            try {
                newDir = (String) moveDirTable.getValueAt(moveDirTable.getSelectedRow(), 0);
                DataClient.cd(newDir);
                newDir = DataClient.currentDir();
                updateMoveDirTable();
            } catch (IOException ex) {
                visual.ErrorHandler.showError(ex);
            }
        }
    }//GEN-LAST:event_moveDirTableMouseClicked

    private void moveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveButtonActionPerformed
        try {
            if (currDir.equals(DataClient.currentDir())) {
                JOptionPane.showMessageDialog(this, "Can't move to the same "
                        + "place !", "Move file", JOptionPane.INFORMATION_MESSAGE);
            } else {
                for (String name : names) {
                    if (currDir.equals("/")) {
                        currName = currDir + name;
                        newName = newDir + "/" + name.substring(name.
                                lastIndexOf("/") + 1, name.length());
                    } else {
                        currName = currDir + "/" + name;
                        if (newDir.equals("/")) {
                            newName = newDir + name.substring(name.lastIndexOf(
                                    "/") + 1, name.length());
                        } else {
                            newName = newDir + "/" + name.substring(name.
                                    lastIndexOf("/") + 1, name.length());
                        }
                    }

                    DataClient.rename(currName, newName);
                    DefaultFrame.updateLog("Move " + currName + " to " + newName);
                }
            }

            this.dispose();
            DataClient.cd(currDir);
            DefaultFrame.updateFileTable();
        } catch (IOException ex) {
            visual.ErrorHandler.showError(ex);
        }
    }//GEN-LAST:event_moveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MoveFileFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MoveFileFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MoveFileFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MoveFileFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new MoveFileFrame().setVisible(true);
            } catch (IOException ex) {
                visual.ErrorHandler.showError(ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton moveButton;
    private javax.swing.JTable moveDirTable;
    // End of variables declaration//GEN-END:variables

}
