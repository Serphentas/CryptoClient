/* 
 * Copyright (C) 2016 Serphentas
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package visual;

import javax.swing.JComboBox;
import javax.swing.UIManager;

/**
 *
 * @author Dreadlockyx
 */
public class PreferencesFrame extends javax.swing.JFrame {

    private int defaultParallelCryptoThreadsCount = internal.Settings.getParallelCryptoThreads();
    private boolean defaultIsParallelCrypto = internal.Settings.isParallelCrypto();

    private int newParallelCryptoThreadsCount;
    private boolean newIsParallelCrypto;

    /**
     * Creates new form PreferencesFrame
     */
    public PreferencesFrame() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        applyButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        OKButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        generalSettingsPanel = new javax.swing.JPanel();
        networkSettingsPanel = new javax.swing.JPanel();
        securitySettingsPannel = new javax.swing.JPanel();
        parallelCryptoChoiceLabel = new javax.swing.JLabel();
        parallelCryptoChoiceMenu = new javax.swing.JComboBox();
        parallelCryptoThreadsLabel = new javax.swing.JLabel();
        parallelCryptoThreadsMenu = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Preferences");
        setResizable(false);
        setSize(new java.awt.Dimension(570, 440));

        applyButton.setText("Apply");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        OKButton.setText("OK");
        OKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout generalSettingsPanelLayout = new javax.swing.GroupLayout(generalSettingsPanel);
        generalSettingsPanel.setLayout(generalSettingsPanelLayout);
        generalSettingsPanelLayout.setHorizontalGroup(
            generalSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 585, Short.MAX_VALUE)
        );
        generalSettingsPanelLayout.setVerticalGroup(
            generalSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("General", generalSettingsPanel);

        javax.swing.GroupLayout networkSettingsPanelLayout = new javax.swing.GroupLayout(networkSettingsPanel);
        networkSettingsPanel.setLayout(networkSettingsPanelLayout);
        networkSettingsPanelLayout.setHorizontalGroup(
            networkSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 585, Short.MAX_VALUE)
        );
        networkSettingsPanelLayout.setVerticalGroup(
            networkSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Network", networkSettingsPanel);

        parallelCryptoChoiceLabel.setText("Parallelized encryption/decryption");

        parallelCryptoChoiceMenu.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Yes", "No" }));
        parallelCryptoChoiceMenu.setSelectedIndex(1);
        parallelCryptoChoiceMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parallelCryptoChoiceMenuActionPerformed(evt);
            }
        });
        parallelCryptoChoiceMenu.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                parallelCryptoChoiceMenuPropertyChange(evt);
            }
        });

        parallelCryptoThreadsLabel.setText("Parallel thread count");

        parallelCryptoThreadsMenu.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6" }));
        parallelCryptoThreadsMenu.setSelectedIndex(1);
        parallelCryptoThreadsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parallelCryptoThreadsMenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout securitySettingsPannelLayout = new javax.swing.GroupLayout(securitySettingsPannel);
        securitySettingsPannel.setLayout(securitySettingsPannelLayout);
        securitySettingsPannelLayout.setHorizontalGroup(
            securitySettingsPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(securitySettingsPannelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(securitySettingsPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(parallelCryptoChoiceLabel)
                    .addComponent(parallelCryptoThreadsLabel))
                .addGap(24, 24, 24)
                .addGroup(securitySettingsPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(parallelCryptoThreadsMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(parallelCryptoChoiceMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(339, Short.MAX_VALUE))
        );
        securitySettingsPannelLayout.setVerticalGroup(
            securitySettingsPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(securitySettingsPannelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(securitySettingsPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parallelCryptoChoiceLabel)
                    .addComponent(parallelCryptoChoiceMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(securitySettingsPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parallelCryptoThreadsLabel)
                    .addComponent(parallelCryptoThreadsMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(334, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Security", securitySettingsPannel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(OKButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(applyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton))
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(applyButton)
                    .addComponent(cancelButton)
                    .addComponent(OKButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void parallelCryptoChoiceMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parallelCryptoChoiceMenuActionPerformed
        newIsParallelCrypto = parallelCryptoChoiceMenu.getSelectedItem().toString().equals("Yes");
    }//GEN-LAST:event_parallelCryptoChoiceMenuActionPerformed

    private void parallelCryptoChoiceMenuPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_parallelCryptoChoiceMenuPropertyChange

    }//GEN-LAST:event_parallelCryptoChoiceMenuPropertyChange

    private void OKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButtonActionPerformed
        // setting new values
        internal.Settings.setParallelCrypto(newIsParallelCrypto);
        internal.Settings.setParallelCryptoThreads(newParallelCryptoThreadsCount);
        this.dispose();
    }//GEN-LAST:event_OKButtonActionPerformed

    private void parallelCryptoThreadsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parallelCryptoThreadsMenuActionPerformed
        newParallelCryptoThreadsCount = Integer.parseInt(parallelCryptoThreadsMenu.getSelectedItem().toString());
    }//GEN-LAST:event_parallelCryptoThreadsMenuActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        internal.Settings.setParallelCrypto(newIsParallelCrypto);
        internal.Settings.setParallelCryptoThreads(newParallelCryptoThreadsCount);
    }//GEN-LAST:event_applyButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PreferencesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PreferencesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PreferencesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PreferencesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PreferencesFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OKButton;
    private javax.swing.JButton applyButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel generalSettingsPanel;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel networkSettingsPanel;
    private javax.swing.JLabel parallelCryptoChoiceLabel;
    private javax.swing.JComboBox parallelCryptoChoiceMenu;
    private javax.swing.JLabel parallelCryptoThreadsLabel;
    private javax.swing.JComboBox parallelCryptoThreadsMenu;
    private javax.swing.JPanel securitySettingsPannel;
    // End of variables declaration//GEN-END:variables
}
